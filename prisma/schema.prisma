generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique @db.VarChar(100)
  emailVerified       DateTime?
  name                String                @db.VarChar(100)
  surname             String?               @db.VarChar(100)
  document            String?               @db.VarChar(16)
  documentType        DocumentType          @default(CC)
  phone               String?               @db.VarChar(14)
  roles               Role[]
  firstLogin          DateTime?
  image               String?
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  accounts            Account[]
  commentaries        Commentary[]
  sessions            Session[]
  userVacantDocuments UserVacantDocuments[]
  interviews          UsersOnInterviews[]
  vacancies           UsersOnVacancies[]
  vacants             Vacant[]
}

model Vacant {
  id                  String                @id @default(cuid())
  jobTitleId          String
  maxCandidaties      Int
  minSalary           Float
  maxSalary           Float
  initDate            DateTime?
  contractType        String?               @db.VarChar(14)
  createdById         String?
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  createdBy           User?                 @relation(fields: [createdById], references: [id])
  jobTitle            JobTitle              @relation(fields: [jobTitleId], references: [id])
  documents           Document[]
  userVacantDocuments UserVacantDocuments[]
  users               UsersOnVacancies[]
}

model JobTitle {
  id          String    @id @default(cuid())
  code        String    @unique @db.VarChar(100)
  name        String    @db.VarChar(100)
  description String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  vacants     Vacant[]
}

model Document {
  id                  String                @id @default(cuid())
  vacantId            String
  type                AttachedType
  name                String                @db.VarChar(100)
  description         String
  createdAt           DateTime?             @default(now())
  updatedAt           DateTime?             @updatedAt
  vacant              Vacant                @relation(fields: [vacantId], references: [id], onDelete: Cascade)
  userVacantDocuments UserVacantDocuments[]
}

model UsersOnVacancies {
  id         String                @id @default(cuid())
  userId     String
  vacantId   String
  status     VacantStatus          @default(PENDING)
  createdAt  DateTime?             @default(now())
  updatedAt  DateTime?             @updatedAt
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  vacant     Vacant                @relation(fields: [vacantId], references: [id])
  interviews Interview[]
  documents  UserVacantDocuments[]

  @@unique([userId, vacantId])
}

model UserVacantDocuments {
  id                 String            @id @default(cuid())
  userId             String
  vacantId           String
  documentId         String
  uri                String?
  defaultUri         String?
  createdAt          DateTime?         @default(now())
  updatedAt          DateTime?         @updatedAt
  usersOnVacanciesId String?
  document           Document          @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  UsersOnVacancies   UsersOnVacancies? @relation(fields: [usersOnVacanciesId], references: [id], onDelete: Cascade)
  vacant             Vacant            @relation(fields: [vacantId], references: [id], onDelete: Cascade)

  @@unique([userId, vacantId, documentId])
}

model Interview {
  id           String              @id @default(cuid())
  userVacantId String
  title        String              @db.VarChar(100)
  description  String
  location     String              @db.VarChar(255)
  type         InterviewType
  initDate     DateTime
  finalDate    DateTime
  createdAt    DateTime?           @default(now())
  updatedAt    DateTime?           @updatedAt
  userVacant   UsersOnVacancies    @relation(fields: [userVacantId], references: [id], onDelete: Cascade)
  commentaries Commentary[]
  users        UsersOnInterviews[]
}

model UsersOnInterviews {
  id          String    @id @default(cuid())
  interviewId String
  userId      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
}

model Commentary {
  id          String    @id @default(cuid())
  interviewId String
  userId      String
  value       String    @db.VarChar(255)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])
}

enum DocumentType {
  CC
  NIT
}

model Page {
  id       String  @id @default(cuid())
  name     String  @unique
  path     String  @unique
  isPublic Boolean @default(false)
  roles    Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        String          @id @default(cuid())
  name      Enum_RoleName   @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     User[]
  pages     Page[]
}

enum Enum_RoleName {
  ADMIN
  CANDIDATE
}

enum ContractType {
  UNDEFINED
  DEFINED
  PROVISION_SERVICE
}

enum VacantStatus {
  PENDING
  INTERVIEW
  SEND_DOCUMENTS
  REVIEW
  REJECTED
  APPROVED
}

enum AttachedType {
  CANDIDATE
  BUSINESS
}

enum InterviewType {
  PRESENTIAL
  VIRTUAL
}
