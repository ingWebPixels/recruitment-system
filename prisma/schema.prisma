generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentType {
  CC
  NIT
}

enum Role {
  ADMIN
  CANDIDATE
}

enum ContractType {
  UNDEFINED
  DEFINED
  PROVISION_SERVICE
}

enum VacantStatus {
  PENDING
  INTERVIEW
  SEND_DOCUMENTS
  REVIEW
  REJECTED
  APPROVED
}

enum AttachedType {
  CANDIDATE
  BUSINESS
}

enum InterviewType {
  PRESENTIAL
  VIRTUAL
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique @db.VarChar(100)
  name                 String                @db.VarChar(100)
  surname              String                @db.VarChar(100)
  document             String                @db.VarChar(16)
  documentType         DocumentType          @default(CC)
  phone                String?               @db.VarChar(14)
  role                 Role                  @default(CANDIDATE)
  firstLogin           DateTime?
  photoUri             String?
  interviews           UsersOnInterviews[]
  vacancies            UsersOnVacancies[]
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  vacants               Vacant[]
  userVacantDocuments  UserVacantDocuments[]
  commentaries         Commentaries[]
}

model Vacant {
  id                  String                @id @default(cuid())
  jobTitle            JobTitle              @relation(fields: [jobTitleId], references: [id])
  jobTitleId        String
  maxCandidaties     Int
  minSalary          Float
  maxSalary          Float
  initDate           DateTime?
  contractType       String?               @db.VarChar(14)
  createdBy           User?                 @relation(fields: [createdById], references: [id])
  createdById          String?
  createdAt          DateTime?             @default(now())
  updatedAt          DateTime?             @updatedAt
  users               UsersOnVacancies[]
  documents           Document[]
  userVacantDocuments UserVacantDocuments[]
}

model JobTitle {
  id          String    @id @default(cuid())
  code        String    @unique @db.VarChar(100)
  name        String    @db.VarChar(100)
  description String
  vacants     Vacant[]
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model Document {
  id                  String                @id @default(cuid())
  vacant              Vacant                @relation(fields: [vacantId], references: [id])
  vacantId           String
  type                AttachedType
  name                String                @db.VarChar(100)
  description         String
  createdAt          DateTime?             @default(now())
  updatedAt          DateTime?             @updatedAt
  userVacantDocuments UserVacantDocuments[]
}

model UsersOnVacancies {
  id         String                @id @default(cuid())
  user       User                  @relation(fields: [userId], references: [id])
  userId    String
  vacant     Vacant                @relation(fields: [vacantId], references: [id])
  vacantId  String
  status     VacantStatus          @default(PENDING)
  documents  UserVacantDocuments[]
  interviews Interview[]
  createdAt DateTime?             @default(now())
  updatedAt DateTime?             @updatedAt

  @@unique([userId, vacantId])
}

model UserVacantDocuments {
  id                 String            @id @default(cuid())
  user               User              @relation(fields: [userId], references: [id])
  userId            String
  vacant             Vacant            @relation(fields: [vacantId], references: [id])
  vacantId          String
  document           Document          @relation(fields: [documentId], references: [id])
  documentId        String
  uri                String?
  defaultUri        String?
  createdAt         DateTime?         @default(now())
  updatedAt         DateTime?         @updatedAt
  UsersOnVacancies   UsersOnVacancies? @relation(fields: [usersOnVacanciesId], references: [id])
  usersOnVacanciesId String?

  @@unique([userId, vacantId, documentId])
}

model Interview {
  id             String              @id @default(cuid())
  userVacant     UsersOnVacancies    @relation(fields: [userVacantId], references: [id])
  userVacantId String
  users          UsersOnInterviews[]
  title          String              @db.VarChar(100)
  description    String
  location       String              @db.VarChar(255)
  type           InterviewType
  initDate      DateTime
  finalDate     DateTime
  createdAt     DateTime?           @default(now())
  updatedAt     DateTime?           @updatedAt
  commentaries    Commentaries[]
}

model UsersOnInterviews {
  id           String    @id @default(cuid())
  interview    Interview @relation(fields: [interviewId], references: [id])
  interviewId String
  user         User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Commentaries {
  id           String    @id @default(cuid())
  interview    Interview @relation(fields: [interviewId], references: [id])
  interviewId String
  user         User      @relation(fields: [userId], references: [id])
  userId      String
  value        String    @db.VarChar(255)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}
